{"version":3,"names":[],"mappings":"","sources":["main.js"],"sourcesContent":["// Register the service worker\r\nif ('serviceWorker' in navigator) {\r\n  navigator.serviceWorker.register('./sw.js').then((reg) => {\r\n\r\n    if (reg.waiting) {\r\n\r\n      //console.log(\"sw is skipping waiting\");\r\n      self.skipWaiting();\r\n        \r\n      return;\r\n      }\r\n\r\n\r\n  // Registration was successful\r\n  console.log('Registration Worked!', reg.scope);\r\n}).catch(err => {\r\n  // registration failed :(\r\n  console.log('Registration failed!: ', err);\r\n  });\r\n}\r\n\r\n\r\nlet restaurants,\r\n  neighborhoods,\r\n  cuisines\r\nvar newMap\r\nvar markers = []\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  initMap(); // added \r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nfetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nfillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nfetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nfillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize leaflet map, called from HTML.\r\n */\r\ninitMap = () => {\r\n  self.newMap = L.map('map', {\r\n        center: [40.722216, -73.987501],\r\n        zoom: 12,\r\n        scrollWheelZoom: false\r\n      });\r\n  L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\r\n    mapboxToken:'sk.eyJ1IjoicGZsYXNoIiwiYSI6ImNqa3NkNzU3cTExN3QzcHQ5aG9sNHAxaTMifQ.ouJfUluG0rRvHT7HSk-Ghw',\r\n    //'<your MAPBOX API KEY HERE>',\r\n    maxZoom: 18,\r\n    attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\r\n      '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\r\n      'Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\r\n    id: 'mapbox.streets'\r\n  }).addTo(newMap);\r\n\r\n  updateRestaurants();\r\n}\r\n/*\r\nwindow.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  updateRestaurants();\r\n} \r\n*/\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nupdateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nresetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  if (self.markers) {\r\n    self.markers.forEach(marker => marker.remove());\r\n  }\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\ncreateRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n/*\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img';\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  li.append(image);\r\n*/\r\n\r\n  /**\r\n  * Create picture elements, and add source child elements to the html \r\n  */\r\n  // create a picture element. This picture element will allow source tag for your image\r\n  const picture = document.createElement('picture');\r\n  li.append(picture);\r\n  // Here you will specify the different images for display\r\n  const imageSrc = DBHelper.imageUrlForRestaurant(restaurant);\r\n  // the -large_2x.jpg should be your own image name you have\r\n  const largeImageSrc = imageSrc.replace('.jpg', '--large_2x.jpg'); \r\n  // the -normal_1x.jpg should be your own image name you have\r\n  const normalImageSrc = imageSrc.replace('.jpg', '--normal_1x.jpg');\r\n  // the -small.jpg should be your own image name you have\r\n  const smallImageSrc = imageSrc.replace('.jpg', '--small.jpg'); \r\n  // then you create two source elements\r\n  const source1 = document.createElement('source');\r\n  source1.setAttribute('type', 'image/jpg');\r\n  source1.setAttribute('media','(' + 'min-width:' + '750px' + ')');\r\n  source1.setAttribute('srcset', largeImageSrc + ' 2x,' + normalImageSrc + ' 1x');\r\n\r\n  const source2 = document.createElement('source');\r\n  source1.setAttribute('type', 'image/jpg');\r\n  source1.setAttribute('media','(' + 'min-width:' + '320px' + ')');\r\n  source1.setAttribute('srcset', normalImageSrc + ' 1x,' + largeImageSrc + ' 2x' );\r\n\r\n  picture.append(source1);\r\n  picture.append(source2);\r\n  // then you create another img element and add tag and other attributes to it\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img';\r\n  image.src = smallImageSrc;\r\n  // image.src = imageSrc ;\r\n  image.setAttribute('tabindex', 0);\r\n  image.setAttribute('alt', 'image for ' + restaurant.name + ' Restaurant');\r\n  picture.append(image);\r\n\r\n\r\n  const name = document.createElement('h2');\r\n  name.innerHTML = restaurant.name;\r\n  name.setAttribute('tabindex', 0);\r\n  name.setAttribute('aria-label', `${restaurant.name}`);\r\n  li.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  neighborhood.setAttribute('tabindex', 0);\r\n  neighborhood.setAttribute('aria-label', `${restaurant.neighborhood}`);\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  address.setAttribute('tabindex', 0);\r\n  address.setAttribute('aria-label', `${restaurant.address}`);\r\n  li.append(address);\r\n\r\n  const more = document.createElement('button');\r\n  more.setAttribute('type','button');\r\n  more.setAttribute('aria-label', `view details, \r\n    click this to visit ${name.innerHTML} \r\n    restaurant review page, \r\n    note press tab once and hit enter to visit \r\n    ${name.innerHTML} review page`);\r\n\r\n  // more.setAttribute('aria-label', 'view details');\r\n  let anchorForMore = document.createElement('a');\r\n  // anchorForMore.setAttribute('aria-label', 'view details button');\r\n  anchorForMore.setAttribute('aria-hidden', 'true');\r\n  anchorForMore.innerHTML = 'View Details';\r\n  // more.innerHTML = 'View Details';\r\n  // more.href = DBHelper.urlForRestaurant(restaurant);\r\n   anchorForMore.href = DBHelper.urlForRestaurant(restaurant);\r\n  // more.href = DBHelper.urlForRestaurant(restaurant);\r\n  // more.setAttribute(\"href\", DBHelper.urlForRestaurant(restaurant));\r\n  more.append(anchorForMore);\r\n  li.append(more)\r\n\r\n  return li\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\naddMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.newMap);\r\n    marker.on(\"click\", onClick);\r\n    function onClick() {\r\n      window.location.href = marker.options.url;\r\n    }\r\n    self.markers.push(marker);\r\n  });\r\n\r\n} \r\n/*\r\naddMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n}\r\n*/\r\n\r\n\r\n"],"file":"main.js","sourceRoot":"/source/"}